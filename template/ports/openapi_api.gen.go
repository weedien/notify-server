// Package template provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0-20240331212514-80f0b978ef16 DO NOT EDIT.
package ports

import (
	"fmt"
	"net/url"

	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 通用查询接口
	// (GET /templates)
	GetTemplates(c *fiber.Ctx, params GetTemplatesParams) error
	// 创建邮件模板
	// (POST /templates)
	CreateTemplate(c *fiber.Ctx) error
	// 根据id删除模板
	// (DELETE /templates/{tid})
	DeleteTemplateById(c *fiber.Ctx, tid string) error
	// 根据id查询邮件模板
	// (GET /templates/{tid})
	GetTemplateById(c *fiber.Ctx, tid string) error
	// 根据id修改模板内容
	// (PUT /templates/{tid})
	UpdateTemplate(c *fiber.Ctx, tid string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetTemplates operation middleware
func (siw *ServerInterfaceWrapper) GetTemplates(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTemplatesParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", query, &params.Type)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter type: %w", err).Error())
	}

	// ------------- Optional query parameter "contentLen" -------------

	err = runtime.BindQueryParameter("form", true, false, "contentLen", query, &params.ContentLen)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter contentLen: %w", err).Error())
	}

	return siw.Handler.GetTemplates(c, params)
}

// CreateTemplate operation middleware
func (siw *ServerInterfaceWrapper) CreateTemplate(c *fiber.Ctx) error {

	return siw.Handler.CreateTemplate(c)
}

// DeleteTemplateById operation middleware
func (siw *ServerInterfaceWrapper) DeleteTemplateById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "tid" -------------
	var tid string

	err = runtime.BindStyledParameterWithOptions("simple", "tid", c.Params("tid"), &tid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter tid: %w", err).Error())
	}

	return siw.Handler.DeleteTemplateById(c, tid)
}

// GetTemplateById operation middleware
func (siw *ServerInterfaceWrapper) GetTemplateById(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "tid" -------------
	var tid string

	err = runtime.BindStyledParameterWithOptions("simple", "tid", c.Params("tid"), &tid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter tid: %w", err).Error())
	}

	return siw.Handler.GetTemplateById(c, tid)
}

// UpdateTemplate operation middleware
func (siw *ServerInterfaceWrapper) UpdateTemplate(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "tid" -------------
	var tid string

	err = runtime.BindStyledParameterWithOptions("simple", "tid", c.Params("tid"), &tid, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter tid: %w", err).Error())
	}

	return siw.Handler.UpdateTemplate(c, tid)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/templates", wrapper.GetTemplates)

	router.Post(options.BaseURL+"/templates", wrapper.CreateTemplate)

	router.Delete(options.BaseURL+"/templates/:tid", wrapper.DeleteTemplateById)

	router.Get(options.BaseURL+"/templates/:tid", wrapper.GetTemplateById)

	router.Put(options.BaseURL+"/templates/:tid", wrapper.UpdateTemplate)

}
